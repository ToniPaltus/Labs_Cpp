/*
* 10. НАСЛЕДОВАНИЕ. ПОЛИМОРФИЗМ

10.1. НАСЛЕДОВАНИЕ

В предложенных ниже вариантах описывается конкретная задача. Для неё:
- Определить и описать иерархию классов: набор схожих по какому-либо критерию объектов, объединённых в подгруппы (родительские объекты).+
- Для каждого класса описать поля, характеризующие объект, +
 - и методы, позволяющие заполнять и получать значения каждого из полей,+
 - выводить значения полей на экран,+
 - а также необходимые конструкторы.+
- Общие свойства хранить в родительских классах.+
- Конструкторы и методы должны проверять параметры на допустимость.+
- Вывод свойств родительских классов осуществить с использованием наследования и полиморфизма +
(виртуальный метод Print(), который вызывается из operator<< базового класса). +
- Каждый класс должен уметь выводить в виде текста свой тип и набор своих свойств.+
2. Обсудить схему с преподавателем.+
3. Реализовать иерархию в коде.+
4. Создать программу для тестирования описанных объектов, создающую и заполняющую свойства нескольких отдельных объектов,
а затем выводящую свойства всех созданных объектов на экран.+
- Первичную инициализацию свойств объектов осуществите с помощью конструкторов.+
Примечание 1: чтобы позднее такую иерархию классов было удобнее расширять, начинайте её с абстрактного базового класса.+
Примечание 2: во всех вариантах предполагается не менее 3 уровней в иерархии наследования. +
Где удобно - добавляйте в иерархию не указанные в задании аб-страктные или обычные классы. + 

Вариант 3

Вы проектируете 3D RPG игру на космическую тему.+

В на игровой карте могут находиться одновременно разные сущности.
Для реализации первой версии игры вам необходимо разработать иерархию наследования классов+ 
для представления в программе следующего минимального набора сущностей и их свойств:+

1. Неподвижные (система координат в каждый момент времени отсчитывается относительно звезды или ближайшей планеты): звезда, планета
• название
• температура
• наличие твёрдой поверхности, на которую можно высадиться

2. Астероид - подвижный мелкий объект.
• координаты (X, Y, Z)
• скорость (Vx, Vy, Vz)
• максимальный размер в поперечнике

3. Космический корабль (под управлением игрока, или враждебный)
• имя
• координаты (X, Y, Z)
• скорость (Vx, Vy, Vz)
• максимальная скорость Vmax
• боезапас (сколько осталось выстрелов)

4. Ракета выпущенная одним из кораблей
• координаты (X, Y, Z)
• скорость (Vx, Vy, Vz)
• мощность взрывчатки
• время, на которое остался запас топлива (в секундах)
*/
#include "Game.h"
#include "Fixed.h"
#include "Mobile.h"
#include "Planet.h"
#include "Star.h"
#include "Asteroid.h"
#include "Spaceship.h"
#include "Rocket.h"

using namespace std;

int main()
{
	Star star;
	cout << "Create star: " << endl;
	star.fill();
	cout << "\nYour star: " << endl;
	star.print();

	Planet planet;
	cout << "\nCreate planet: " << endl;
	planet.fill();
	cout << "\nYour planet: " << endl;
	planet.print();
	
	Asteroid asteroid;
	cout << "\nCreate asteroid: " << endl;
	asteroid.fill();
	cout << "\nYour asteroid: " << endl;
	asteroid.print();

	Spaceship spaceship;
	cout << "\nCreate spaceship: " << endl;
	spaceship.fill();
	cout << "\nYour spaceship: " << endl;
	spaceship.print();

	Rocket rocket;
	cout << "\nCreate rocket: " << endl;
	rocket.fill();
	cout << "\nYour rocket: " << endl;
	rocket.print();

	return 0;
}