/*
8.7. КЛАСС «ГРАФ»

Объявить шаблон класса «Граф».
Определить структуру класса и его методы.

В классе должен быть:
- конструктор по умолчанию,
- конструктор с формальными параметрами,
- конструктор копирования и деструктор.

Определить методы:
• инициализация первого элемента структуры;
• запись в структуру нового элемента;
• удаление элемента;
• вывод элементов графа на экран;
• удаления всех элементов графа.

Используя объекты класса «Граф», реализовать алгоритм своего варианта задания 7.8.

7.8. ГРАФЫ
Создать подходящий тип данных для представления графа.
Написать и протестировать процедуры, обеспечивающие:
- добавление вершины в граф,
- вывода элементов графа на экран,
- выполнить следующие задания.

Количество вершин графа <=65000, среднее число связей на вершину 6, ограничение по памяти 64 МiB.
Оценить асимптотическую сложность алгоритма.

2. Определить, что для любой пары вершин заданного орграфа одна из этих вершин достижима от другой.
3. Определить, является ли связным заданный граф.
*/
#include "Graf.h"

int main()
{
	Graf<int> graf;
	int size = 0;
	cout << "Enter size of your graf: ";
	enter(cin, size);

	graf.input(size);
	graf.output();

	int ver1 = 0;
	int ver2 = 0;
	cout << "Enter vertex1: ";
	enter(cin, ver1);
	cout << "Enter vertex2: ";
	enter(cin, ver2);

	if (graf.check_graf(ver1, ver2))
	{
		graf.one_to_other(ver1, ver2);
	}
}