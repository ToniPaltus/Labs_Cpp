/*
8.3. КЛАСС «МНОГОРАЗРЯДНОЕ ЧИСЛО»
Объявить класс «многоразрядное целое число».+
- Количество разрядов числа хранить в поле класса,+
- значения разрядов числа хранить в динамической памяти,+
- основание системы счисления задавать константой.+-

Реализовать:
• три вида конструктора (без аргументов, инициализации, копирования),+
• деструктор,+
• перегрузить операции ввода/вывода данных.+
• перегрузить оператор индексирования [ ] для доступа к разрядам числа,+
• операции в задании реализовать посредством перегрузки.+

- Объявление класса разместить в заголовочном файле,+
- определения методов – во втором файле,+
- определение главной функций программы – в третьем файле.+

!При переполнении старшего разряда лишние биты теряются.!+
- Примечание:
Оператор умножения многоразрядных чисел удобно реализовать через более простые перегруженные операторы:
умножение многоразрядного числа на одноразрядное число, сдвиг многоразрядного числа на целое число разрядов, сложение многоразрядных чисел.

Оператор деления многоразрядных чисел удобно реализовать через более простые перегруженные операторы: 
сдвиг многоразрядного числа на целое число разрядов, сравнение и вычитание многоразрядных чисел.

3. Объявить класс «256-разрядное целое положительное двоичное число».
Реализовать операции: 
- вычитания, НЕ НУЖНО
- сдвигов на n разрядов,+
- целочисленного деления, НЕ НУЖНО
- получения остатка от деления. НЕ НУЖНО
- Создать метод для перевода «256-разрядного целого двоичного числа» в десятичное число (представленное в виде строки).+
- Перевести в десятичную систему счисления число 2^200.+
*/
#include"Number.h"

int main()
{
	Number num1(53);
	cout << "Your number in binary code: " << endl;
	cout << num1 << endl;

	string dec_number = num1.convert_bin_to_dec();
	cout << "Dec: ";
	cout << dec_number << endl;

	num1 < 2;
	cout << "Your number in binary code: " << endl;
	cout << num1 << endl;

	dec_number = num1.convert_bin_to_dec();
	cout << "Dec: ";
	cout << dec_number << endl;

	num1 > 3;
	cout << "Your number in binary code: " << endl;
	cout << num1 << endl;

	dec_number = num1.convert_bin_to_dec();
	cout << "Dec: ";
	cout << dec_number << endl;

	return 0;
}